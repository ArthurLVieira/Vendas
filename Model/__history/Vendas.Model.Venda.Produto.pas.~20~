unit Vendas.Model.Venda.Produto;

interface

uses Vendas.Model.Interfaces, System.Generics.Collections;

type

  TModelVendaProduto = class(TInterfacedObject, iProdutoVenda)
  private
    FProdutoVenda: iProduto;
    FPrecoVenda: Currency;
    FQuantidade: Double;
  public
    constructor Create;
    destructor Destroy; override;
    class function New: iProdutoVenda;
    function SetProduto(Value: iProduto): iProdutoVenda;
    function GetProduto: iProduto;
    function SetQuantidade(Value: Double): iProdutoVenda;
    function GetQuantidade: Double;
    function SetPrecoVenda(Value: Currency): iProdutoVenda;
    function GetPrecoVenda: Currency;
  end;

implementation

uses
  System.SysUtils;

{ TModelVendaProduto }

constructor TModelVendaProduto.Create;
begin
  FPrecoVenda := FProdutoVenda.Preco;
  if FProdutoVenda.Quantidade <= 0 then
    raise Exception.Create('Produto sem estoque!');
  FQuantidade := 1;
end;

destructor TModelVendaProduto.Destroy;
begin
  inherited;
end;

function TModelVendaProduto.GetPrecoVenda: Currency;
begin
  Result := FPrecoVenda;
end;

function TModelVendaProduto.GetProduto: iProduto;
begin

end;

function TModelVendaProduto.GetQuantidade: Double;
begin

end;

class function TModelVendaProduto.New: iProdutoVenda;
begin
  Result := Self.Create;
end;

function TModelVendaProduto.SetPrecoVenda(Value: Currency): iProdutoVenda;
begin

end;

function TModelVendaProduto.SetProduto(Value: iProduto): iProdutoVenda;
begin

end;

function TModelVendaProduto.SetQuantidade(Value: Double): iProdutoVenda;
begin

end;

end.
